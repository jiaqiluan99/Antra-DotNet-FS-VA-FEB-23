Test your knowledge
1. What are the six combinations of access modifier keywords and what do they do?
    Public      : All can access
    Private     : Only self can access
    Protected   : Children can access
    Internal    : Same assembly can access
    Protected Internal  : Same assembly and children can access
    Private Protected   : Children from the same assembly can access

2. What is the difference between the static, const, and readonly keywords when applied to
a type member?
    static:     Static members can only be accessed within the static methods.
    const:      Constant variables cannot be modified after declaration.
    readonly:   Readonly variable cannot be modified at run-time. It can only be initialized or changed in the constructor.

3. What does a constructor do?
    It is used to create an object of the class and initialize class members.

4. Why is the partial keyword useful?
    Partial help split the methods into two or more source(.cs) files. All the partial classes will be combined when the whole program is compiled.
    Therefore, when working on a bigger project, splitting the files over different classes helps developers work on the same project simultaneously.

5. What is a tuple?
    It can store multiple data types and duplicate elements in a single data set.

6. What does the C# record keyword do?
    It define a reference type that provides built-in functionality for encapsulating data.

7. What does overloading and overriding mean?
    Overriding: happens between the base class and derived class, we have the same method signature, including access modifier, method name, input/ouput; derived classes can give different implementations for the same method
    Overloading: multiple methods in the same class, same access modifiers, same method name, different input/output

8. What is the difference between a field and a property?
    field: a variable (that can be of any type) that is defined inside a class
    Property: a member of the class that provides an abstraction to set (write) and get (read) the value of a private field

9. How do you make a method parameter optional?
    Assign a value to the parameter that you want it optional.

10. What is an interface and how is it different from abstract class?
    An interface allows one to define functionalities without implementing them.
    But for an abstract class, not all functionalitites need to be abstract.
    However, one class can implement multiple interfaces, whereas it can only extend one class.

11. What accessibility level are members of an interface?
    Public by default

12. True/False. Polymorphism allows derived classes to provide different implementations
of the same method.
    T

13. True/False. The override keyword is used to indicate that a method in a derived class is
providing its own implementation of a method.
    T

14. True/False. The new keyword is used to indicate that a method in a derived class is
providing its own implementation of a method.
    F

15. True/False. Abstract methods can be used in a normal (non-abstract) class.
    F

16. True/False. Normal (non-abstract) methods can be used in an abstract class.
    T

17. True/False. Derived classes can override methods that were virtual in the base class.
    T

18. True/False. Derived classes can override methods that were abstract in the base class.
    T

19. True/False. In a derived class, you can override a method that was neither virtual non abstract in the
base class.
    F

20. True/False. A class that implements an interface does not have to provide an
implementation for all of the members of the interface.
    F

21. True/False. A class that implements an interface is allowed to have other members that
aren’t defined in the interface.
    T

22. True/False. A class can have more than one base class.
    F

23. True/False. A class can implement more than one interface.
    T

